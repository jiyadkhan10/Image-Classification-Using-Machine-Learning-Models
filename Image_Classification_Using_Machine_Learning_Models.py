# -*- coding: utf-8 -*-
"""i191771.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1thVkxRtxz9n531jywIARIHBjr69dsnta
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import datasets, layers, models

"""Read The Data"""

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

data = datasets.cifar10.load_data()

"""Train The Data"""

(X_train, Y_train), (X_test, Y_test) = data

X_train.shape, Y_train.shape,X_test.shape, Y_test.shape

X_train = X_train.reshape(X_train.shape[0], -1)
X_test = X_test.reshape(X_test.shape[0], -1)

X_train.shape, X_test.shape

"""Selection For The Best Featues"""

from sklearn.decomposition import PCA

pca_machine_learning = PCA()
pca_machine_learning.fit_transform(X_train)

pca_machine_learning.explained_variance_.shape

i = 0
TOTAL_SUM = sum(pca_machine_learning.explained_variance_)
SUM = 0

while(SUM / TOTAL_SUM < 0.98):
    SUM += pca_machine_learning.explained_variance_[i]
    i = i + 1
i

"""Applying PCA With i Which Is Calcuated Above"""

pca_machine_learning = PCA(n_components = i, whiten = True, svd_solver = 'randomized')

X_train = pca_machine_learning.fit_transform(X_train)
X_test = pca_machine_learning.transform(X_test)

"""Logistic Regression Model"""

from sklearn.linear_model import LogisticRegression

logistic_regression = LogisticRegression()
logistic_regression.fit(X_train, Y_train)

Y_pred = logistic_regression.predict(X_test)

from sklearn.metrics import accuracy_score

Accuracy_of_Logistic_Regression = accuracy_score(Y_test, Y_pred) * 100
print ("Accuracy of Logistic Regression Model:", Accuracy_of_Logistic_Regression)

from sklearn.metrics import recall_score

Recall_Score_of_Logistic_Regression = recall_score(Y_test, Y_pred, average='macro') * 100
print ("Recall Score of Logistic Regression Model:", Recall_Score_of_Logistic_Regression)

from sklearn.metrics import precision_score

Precision_Score_of_Logistic_Regression = precision_score(Y_test, Y_pred, average = 'macro') * 100
print ("Precision Score of Logistic Regression Model:", Precision_Score_of_Logistic_Regression)

from sklearn.metrics import f1_score

F1_Score_of_Logistic_Regression = f1_score(Y_test, Y_pred, average='macro') * 100
print ("F1 Score of Logistic Regression Model:", F1_Score_of_Logistic_Regression)

"""KNN Model"""

from sklearn.neighbors import KNeighborsClassifier

KNN = KNeighborsClassifier(n_neighbors = 5)
KNN.fit(X_train, Y_train)

Y_pred = KNN.predict(X_test)

from sklearn.metrics import accuracy_score

Accuracy_of_KNN = (accuracy_score(Y_pred, Y_test)) * 100
print ("Accuracy of KNN Model:", Accuracy_of_KNN)

from sklearn.metrics import recall_score

Recall_Score_of_KNN = recall_score(Y_test, Y_pred, average='macro')*100
print ("Recall Score of KNN Model:", Recall_Score_of_KNN)

from sklearn.metrics import precision_score

Precision_Score_of_KNN = precision_score(Y_test, Y_pred, average = 'macro') * 100
print ("Precision Score of KNN Model:", Precision_Score_of_KNN)

from sklearn.metrics import f1_score

F1_Score_of_KNN = f1_score(Y_test, Y_pred, average='macro') * 100
print ("F1 Score of KNN Model:", F1_Score_of_KNN)

"""Random Forest Model"""

from sklearn.ensemble import RandomForestClassifier

Random_Forest_Classifier = RandomForestClassifier()
Random_Forest_Classifier.fit(X_train, Y_train)

Y_pred = Random_Forest_Classifier.predict(X_test)

from sklearn.metrics import accuracy_score

Accuracy_of_Random_Forest_Classifier = accuracy_score(Y_test, Y_pred) * 100
print ("Accuracy of Random Forest Classifier Model:", Accuracy_of_Random_Forest_Classifier)

from sklearn.metrics import recall_score

Recall_Score_of_Random_Forest_Classifier = recall_score(Y_test, Y_pred, average='macro') * 100
print ("Recall Score of Random Forest Classifier Model:", Recall_Score_of_Random_Forest_Classifier)

from sklearn.metrics import precision_score

Precision_Score_of_Random_Forest_Classifier = precision_score(Y_test, Y_pred, average = 'macro') * 100
print ("Precision Score of Random Forest Classifier Model:", Precision_Score_of_Random_Forest_Classifier)

from sklearn.metrics import f1_score

F1_Score_of_Random_Forest_Classifier = f1_score(Y_test, Y_pred, average='macro') * 100
print ("F1 Score of Random Forest Classifier Model:", F1_Score_of_Random_Forest_Classifier)

"""Comparsion Between Logistic Regression, KNN And Random Forest Classifier Model"""

print("Accuray of Logistic Regression Model: ", Accuracy_of_Logistic_Regression)
print("Accuray of KNN Model: ", Accuracy_of_KNN)
print("Accuray of Random Forest Classifier Model: ", Accuracy_of_Random_Forest_Classifier)

x = ['Logistic Regression','KNN','Random Forest Classifier']
y = [Accuracy_of_Logistic_Regression, Accuracy_of_KNN, Accuracy_of_Random_Forest_Classifier]
y

plt.figure(figsize = (8,8))
plt.bar(x,y, color = ['red', 'yellow', 'skyblue'])
plt.xlabel('Models')
plt.ylabel("Accuracy")
plt.title("Accuracy of Logistic Regression, KNN and Random Forest Classifier Model")
plt.show()

print("Recall Score of Logistic Regression Model: ", Recall_Score_of_Logistic_Regression)
print("Recall Score of KNN Model: ", Recall_Score_of_KNN)
print("Recall Score of Random Forest Classifier Model:", Recall_Score_of_Random_Forest_Classifier)

x = ['Logistic Regression','KNN','Random Forest Classifier']
y = [Recall_Score_of_Logistic_Regression, Recall_Score_of_KNN, Recall_Score_of_Random_Forest_Classifier]
y

plt.figure(figsize = (8,8))
plt.bar(x,y, color = ['black', 'blue', 'orange'])
plt.xlabel('Models')
plt.ylabel("Recall Score")
plt.title("Recall Score of Logistic Regression, KNN and Random Forest Classifier Model")
plt.show()

print("Precision Score of Logistic Regression Model: ", Precision_Score_of_Logistic_Regression)
print("Precision Score of KNN Model: ", Precision_Score_of_KNN)
print ("Precision Score of Random Forest Classifier Model:", Precision_Score_of_Random_Forest_Classifier)

x = ['Logistic Regression','KNN','Random Forest Classifier']
y = [Precision_Score_of_Logistic_Regression, Precision_Score_of_KNN, Precision_Score_of_Random_Forest_Classifier]
y

plt.figure(figsize = (8,8))
plt.bar(x,y, color = ['green', 'grey', 'yellow'])
plt.xlabel('Models')
plt.ylabel("Precision Score")
plt.title("Precision Score of Logistic Regression, KNN and Random Forest Classifier Model")
plt.show()

print("F1 Score of Logistic Regression Model: ", F1_Score_of_Logistic_Regression)
print("F1 Score of KNN Model: ", F1_Score_of_KNN)
print ("F1 Score of Random Forest Classifier Model:", F1_Score_of_Random_Forest_Classifier)

x = ['Logistic Regression','KNN','Random Forest Classifier']
y = [F1_Score_of_Logistic_Regression, F1_Score_of_KNN, F1_Score_of_Random_Forest_Classifier]
y

plt.figure(figsize = (8,8))
plt.bar(x,y, color = ['purple', 'brown', 'skyblue'])
plt.xlabel('Models')
plt.ylabel("F1 Score")
plt.title("F1 Score of Logistic Regression, KNN and Random Forest Classifier Model")
plt.show()

